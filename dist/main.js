var d=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var p=d(R=>{var N={reset:"\x1B[0m",cyan:"\x1B[36m",green:"\x1B[32m",red:"\x1B[31m",yellow:"\x1B[33m",magenta:"\x1B[35m"};R.COLORS=N});var $=d(T=>{var{COLORS:i}=p();T.ConsoleResults=function(t){let o=0,s=0;t.forEach(({runner:n,results:r},c)=>{c>0&&console.log(`${i.magenta}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}\u{1F680}${i.reset}
`),console.log(`${i.cyan}\u{1F504} Processing: ${n}${i.reset}`);let a=0,m=r.tests.length;r.tests.forEach(l=>{l.status==="pass"?(console.log(`${i.green}\u2705 ${l.name}
${i.reset}`),a+=1):(console.log(`${i.red}\u274C ${l.name}
`),console.log(`Error: ${l.message||`Failed to run test '${l.name}'`}
${i.reset}`))}),o+=a,s+=m;let x=a/m*100;console.log(`Total points for ${n}: ${x.toFixed(2)}/100
`)});let u=o/s*100;console.log(`${i.cyan}\u{1F3C6} Grand Total Points: ${u.toFixed(2)}/100${i.reset}
`)}});var k=d(_=>{var q=require("@actions/core"),F=require("@actions/github");_.NotifyClassroom=async function(t){let{totalScore:o,maxScore:s}=t.reduce((g,{results:h})=>(h.max_score&&(g.maxScore+=h.max_score,h.tests.forEach(({score:C})=>{g.totalScore+=C})),g),{totalScore:0,maxScore:0});if(!s)return;let u=process.env.GITHUB_TOKEN||q.getInput("token");if(!u||u==="")return;let n=F.getOctokit(u);if(!n)return;let r=process.env.GITHUB_REPOSITORY||"/",[c,a]=r.split("/");if(!c||!a)return;let m=parseInt(process.env.GITHUB_RUN_ID||"");if(Number.isNaN(m))return;let l=(await n.rest.checks.listForRepo({owner:c,repo:a,check_name:"Autograding"})).data.check_runs.find(g=>g.name==="Autograding"&&g.check_suite.workflow_run_id===m);if(!l)return;let f=`Points ${o}/${s}`;await n.rest.checks.update({owner:c,repo:a,check_run_id:l.id,output:{title:"Autograding",summary:f,text:f,annotations:[{path:".github",start_line:1,end_line:1,annotation_level:"notice",message:f,title:"Autograding complete"}]}})}});var y=d(w=>{var{COLORS:O}=p(),I=require("cli-table3"),A=e=>e.tests.reduce((o,{status:s})=>s==="pass"?o+1:o,0)/e.tests.length*(b(e)||1),E=e=>e.reduce((t,{results:o})=>t+o.max_score,0),b=e=>e.max_score||0,P=(e,t)=>{if(e===0)return 0 .toFixed(2);let o=t!==0?e/t*100:0;return Math.round(o).toFixed(2)};function U(e){let t=new I({head:["Test Runner Name","Test Score","Max Score","Weight"],colWidths:[20,13,13,10]}),o=E(e);console.log(O.magenta,"Test Runner Summary",O.reset);let s=[{score:0,maxScore:0,weight:0}];e.forEach(({runner:u,results:n})=>{let r=b(n),c=P(r,o),a=A(n);t.push([u.trim(),a,r,c]),s.push({score:a,maxScore:r,weight:c})}),t.push(["Total: ","----","----",s.reduce((u,{score:n,weight:r,maxScore:c})=>u+(n||0)/(c||1)*r,0).toFixed(2)+"%"]),console.log(t.toString())}w.AggregateResults=U});var S=require("@actions/core"),{ConsoleResults:v}=$(),{NotifyClassroom:L}=k(),{AggregateResults:B}=y();try{let e=S.getInput("runners").split(",").map(t=>{let o=process.env[`${t.trim().toUpperCase()}_RESULTS`],s=Buffer.from(o,"base64").toString("utf-8");return{runner:t,results:JSON.parse(s)}});v(e),L(e),B(e),e.some(t=>t.results.status==="fail")&&S.setFailed("Some tests failed.")}catch(e){S.setFailed(e.message)}
